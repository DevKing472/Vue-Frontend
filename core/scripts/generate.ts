import generator from './utils/page-generator'
import { path as rootPath } from 'app-root-path'
import * as path from 'path'
import * as ssr from './utils/ssr-renderer'
import config from 'config'
import themeRoot from '../build/theme-path'
import { search } from './utils/catalog-client'
import bodybuilder from 'bodybuilder'
const resolve = file => path.resolve(rootPath, file)

const compileOptions = {
  escape: /{{([^{][\s\S]+?[^}])}}/g,
  interpolate: /{{{([\s\S]+?)}}}/g
}
const templatesCache = ssr.initTemplatesCache(config, compileOptions)

// In production: create server renderer using server bundle and index HTML
// template from real fs.
// The server bundle is generated by vue-ssr-webpack-plugin.
const clientManifest = require(resolve('dist/vue-ssr-client-manifest.json'))
const bundle = require(resolve('dist/vue-ssr-bundle.json'))
// src/index.template.html is processed by html-webpack-plugin to inject
// build assets and output as dist/index.html.
// TODO: Add dynamic templates loading from (config based?) list
const renderer = ssr.createRenderer(bundle, clientManifest)
const destPath = resolve(config.staticPages.destPath)

generator.clearAll(destPath)
generator.saveScripts(resolve(''), destPath)
generator.saveSW(resolve(''), destPath)
generator.saveAssets(themeRoot, destPath)

/* search({
    size: 1000,
    from: 0,
    sort: 'id:desc',
    type: 'category',
    searchQuery: bodybuilder().query('term', 'is_active', true)
}, config, config).then(results => {
    if (results.hits) {
        results.hits.hits.forEach(category => {
            console.log(`Generating static page for category ${category._source.url_path}`)
            const urlToRender = category._source.url_path
            const res = { redirect: (url) => {}}
            const req = { url: urlToRender }
            const context = ssr.initSSRRequestContext(null, req, res, config)
            renderer.renderToString(context).then(output => {
                output = ssr.applyAdvancedOutputProcessing(context, output, templatesCache, true);
                generator.saveRenderedPage(path.join(destPath, urlToRender), output)
            }).catch(err => {
                console.error(err)
            })
        });
    }
}) */

search({
  size: 50,
  from: 0,
  sort: 'id:desc',
  type: 'product',
  searchQuery: bodybuilder().query('status', [1], true).andQuery('visibility', [3, 4])
}, config, config /* TODO: add support for different storeviews */).then(results => {
  if (results.hits) {
    results.hits.hits.forEach(category => {
      console.log(`Generating static page for product ${category._source.url_path}`)
      const urlToRender = category._source.url_path
      const res = { redirect: (url) => {} }
      const req = { url: urlToRender }
      const context = ssr.initSSRRequestContext(null, req, res, config)
      renderer.renderToString(context).then(output => {
        output = ssr.applyAdvancedOutputProcessing(context, output, templatesCache, true);
        generator.saveRenderedPage(path.join(destPath, urlToRender), output)
      }).catch(err => {
        console.error(err)
      })
    });
  }
})
